/*  
    Arduino DC Motor Control - PWM | H-Bridge |  controlled by PS3 Navigation Move Controller
    
    Modified version in progress, working with PS3 Navigation Controller and DROKK PWM, Emergency Stop action added when pressing PS button

    Adding multipe button actions from the PS3 remote to turn on different output on the MEGA

    Adding HEX serial write commands for MP3 player control
*/
    
#define up 22    // output pins for droid action to be programmed later on 
#define down 24  // output pins for droid action to be programmed later on
#define left 26  // output pins for droid action to be programmed later on
#define right 28 // output pins for droid action to be programmed later on
#define cross 30 // not use at the moment, function to pause mp3 player

#define l1 34 // output pins for droid action to be programmed later on
#define l3 36 // output pins for droid action to be programmed later on

#define enA 44 // left motor PWM control and direction
#define in1 40 // left forward signal
#define in2 42 // left reverse signal

#define enB 46 // right motor PWM control and direction
#define in3 48 // right forward signal
#define in4 43 // right reverse signal (re assigning from pin 50 to 43) now working

#define dome 45  // dome rotation PWM speed control
#define in5 47   // dome forward signal
#define in6 49   // dome reverse signal
#define domet 25 // dome relay for default position motor

#define Relay 23 // relay output to disconnect the entire system from the battery to prevent low battery damage
#define Capcharge 27 // output to initially charge the voltage sense capacitor to reduce waiting time when booting up

int Vbatt= A2; // analog pin to sense the voltage of the running battery for low cutoff option
int readVal;
float V2; // variable for battery pack voltage reading

int ThermistorBatt1 = A13; // Thermistor1 reading from batt bank 1
int ThermistorBatt2 = A14; // Thermistor2 reading from batt bank 2
int Vo1;
int Vo2;
float TR1 = 10000;
float TR3 = 10000;
float logTR2, TR2, logTR4, TR4, T1, T2, Tc1, Tc2, Tf;
float c1 = 1.009249522e-03, c2 = 2.378405444e-04, c3 = 2.019202697e-07;

int motorSpeedA = 0;
int motorSpeedB = 0;

int domeSpeed = 0;

int DomeState=0;

#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27,20,4); // set the LCD address to 0x27 for a 16 chars and 2 line display

#include <PS3BT.h>
#include <SoftwareSerial.h>
SoftwareSerial pwm (19, 18);  // Rx, Tx to send serial command to MP3 Player

byte File1[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x01,0xEF}; //Hex format commands to be sent to dfplayer mini
byte File2[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x02,0xEF};
byte File3[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x03,0xEF};
byte File4[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x04,0xEF};
byte File5[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x05,0xEF};
byte File6[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x06,0xEF};
byte File7[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x07,0xEF};
byte File8[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x08,0xEF};
byte File9[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x09,0xEF};
byte File10[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x0a,0xEF};
byte File11[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x0b,0xEF};
byte File12[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x0c,0xEF};
byte File13[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x0d,0xEF};
byte File14[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x0e,0xEF};
byte File15[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x0f,0xEF};
byte File16[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x10,0xEF};
byte File17[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x11,0xEF};
byte File18[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x12,0xEF};
byte File19[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x13,0xEF};
byte File20[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x14,0xEF};
byte File21[] = {0x7E,0xFF,0x06,0x0F,0x00,0x01,0x15,0xEF};

byte Vol01[] = {0x7E,0xFF,0x06,0x06,0x00,0x00,0x01,0xEF}; //Hex format commands to be sent to dfplayer mini
byte Vol12[] = {0x7E,0xFF,0x06,0x06,0x00,0x00,0x0C,0xEF};
byte Vol30[] = {0x7E,0xFF,0x06,0x06,0x00,0x00,0x1E,0xEF};

byte VolUP[] = {0x7E,0xFF,0x06,0x04,0x00,0x00,0x00,0xEF}; //Hex format commands to be sent to dfplayer mini
byte VolDN[] = {0x7E,0xFF,0x06,0x05,0x00,0x00,0x00,0xEF};
byte MusPd[] = {0x7E,0xFF,0x06,0x0E,0x00,0x00,0x00,0xEF}; //To pause the current mp3 track playing
USB Usb;
BTD Btd(&Usb);
PS3BT PS3(&Btd);

void(* resetFunc) (void) = 0;

void setup() 

{
  
    pinMode(enA, OUTPUT); //PWM output motor 1
    pinMode(in1, OUTPUT); //direction of motor 1
    pinMode(in2, OUTPUT); //direction of motor 1
  
    pinMode(enB, OUTPUT); //PWM output motor 2
    pinMode(in3, OUTPUT); //direction of motor 2
    pinMode(in4, OUTPUT); //direction of motor 2

    pinMode(dome, OUTPUT); //PWM output dome motor
    pinMode(in5, OUTPUT); //direction of dome motor
    pinMode(in6, OUTPUT); //direction of dome motor
    pinMode(domet, OUTPUT); // dome trigger signal to return to default position
    
    pinMode(up, OUTPUT);  // set of pins output for various droid actions to be programmed later on
    pinMode(down, OUTPUT);
    pinMode(left, OUTPUT);
    pinMode(right, OUTPUT);
    pinMode(cross, OUTPUT);  // not used at the moment
  
    pinMode(l1, OUTPUT);  // pin output for various droid action to be programmed later on
    pinMode(l3, OUTPUT);  // pin output for various droid action to be programmed later on
    pinMode(Relay, OUTPUT); // relay output to disconnect the entire system, goes HIGH when PS pressed
    pinMode(Capcharge, OUTPUT); // set that pin as an output to fast recharge the voltage sense capacitor to reduce wait time

    lcd.init();          // initialize the lcd 
    lcd.backlight();
    Serial.begin(9600);  // using this speed for now because of the LCD default connection speed (would like to use 57600 instead)
 
    pwm.begin(9600);     // set at this rate to communicate with the MP3 default baud

    digitalWrite(Relay, LOW); // that will set the pin to LOW so it will hold the relay pin to 0V so the system will stay on
    digitalWrite(domet, LOW); // set that output low so it can be set high later on
    digitalWrite(Capcharge, HIGH); // turn up output high to fast recharge the voltage sense capacitor
    
    delay(2000); // to give time for the mp3 player to startup before sending the volume preset level
    
    pwm.write(Vol12,sizeof(Vol12)); // preset the volume of the mp3 player to 12
      
  if (Usb.Init() == -1) 
{
    Serial.print(F("\r\nOSC did not start"));
    while (1); //halt
}

    Serial.print(F("\r\nPS3 Bluetooth Library Started"));
    delay(3000); // this is to let time for the Bluetooth dongle to initiate
    pwm.write(File6,sizeof(File6));
    lcd.clear();
    lcd.print("R2D2 BOOTING UP");
    lcd.setCursor(0, 1);
    lcd.print("CONNECT PS3 REM");

    digitalWrite(in5, LOW); // preset the direction pin of the dome motor 
    digitalWrite(in6, HIGH); // preset the direction pin of the dome motor 
}

void loop() 

{

    static bool lastCircleButtonState = false;
    static unsigned long CircleButtonPressedTime;

    readVal=analogRead(Vbatt); // will read the voltage of batt1 from the resistance divider circuit (from 0 to 15V converting to 0 to 5V)
    V2=(17./1026.)*readVal; // to be set according to the voltage limit I want for the li ion

    Vo1 = analogRead(ThermistorBatt1); // This section is for the temperature reading of both battery packs
    Vo2 = analogRead(ThermistorBatt2);
    TR2 = TR1 * (1023.0 / (float)Vo1 - 1.0);
    logTR2 = log(TR2);
    TR4 = TR3 * (1023.0 / (float)Vo2 - 1.0);
    logTR4 = log(TR4);
    T1 = (1.0 / (c1 + c2*logTR2 + c3*logTR2*logTR2*logTR2));
    T2 = (1.0 / (c1 + c2*logTR4 + c3*logTR4*logTR4*logTR4));
    Tc1 = T1 - 273.15;
    Tc2 = T2 - 273.15;
    
    Usb.Task();

  if (PS3.PS3NavigationConnected) // the loop codes between those initial brakets will only run when the PS3 Navigation is connected
{
    int xAxis = PS3.getAnalogHat(LeftHatX); // Read PS3 Joysticks X-axis
    int yAxis = PS3.getAnalogHat(LeftHatY); // Read PS3 Joysticks Y-axis
    
    int dAxis = (PS3.getAnalogButton(L2)); // Read the Joysticks value of L2 for dome rotation speed


  if (yAxis < 90)
{
    // Set Motor A backward
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
    // Set Motor B backward
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
    
    // Convert the declining Y-axis readings for going backward from 128 to 0 into 0 to 255 value for the motor PWM signal
      
    motorSpeedA = map(yAxis, 128, 0, 0, 255); // CHANGED TO MATCH PS3 VALUE
    motorSpeedB = map(yAxis, 128, 0, 0, 255); // CHANGED TO MATCH PS3 VALUE
     
}

  else if (yAxis > 150)
 
{
    // Set Motor A forward
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    // Set Motor B forward
    digitalWrite(in3, LOW);
    digitalWrite(in4, HIGH);
    
    // Convert the increasing Y-axis readings for going forward from 150 to 255 into 0 to 255 value for the motor PWM signal
    
    
    motorSpeedA = map(yAxis, 150, 255, 0, 255); // TO BE CHANGE TO MATCH PS3 VALUE
    motorSpeedB = map(yAxis, 150, 255, 0, 255); // TO BE CHANGE TO MATCH PS3 VALUE
}
  
    // If joystick stays in middle the motors are not moving
  
  else 
{
    motorSpeedA = 0;
    motorSpeedB = 0;
}

    // X-axis used for left and right control
    
  if (xAxis < 100)
{
    // Convert the declining X-axis readings from 100 to 0 into increasing 0 to 255 value
    
    int xMapped = map(xAxis, 100, 0, 0, 255);
    // Move to left - decrease left motor speed, increase right motor speed
    motorSpeedA = motorSpeedA - xMapped;
    motorSpeedB = motorSpeedB + xMapped;
    
    // Confine the range from 0 to 255
    
  if (motorSpeedA < 0) 
{
    motorSpeedA = 0;
}
  if (motorSpeedB > 255) 
{
    motorSpeedB = 255;
}
}
  if (xAxis > 160)
{
    
    // Convert the increasing X-axis readings from 160 to 255 into 0 to 255 value
    
    int xMapped = map(xAxis, 160, 255, 0, 255);
    
    // Move right - decrease right motor speed, increase left motor speed
    
    motorSpeedA = motorSpeedA + xMapped;
    motorSpeedB = motorSpeedB - xMapped;
    
    // Confine the range from 0 to 255
    
  if (motorSpeedA > 255) 
{
    motorSpeedA = 255;
}
  if (motorSpeedB < 0) 
{
    motorSpeedB = 0;
}
}

  
    // Prevent buzzing at low speeds (Adjust according to your motors. Motors couldn't start moving if PWM value was below value of 70)
 
    // if (motorSpeedA < 70) 
    // {
    //  motorSpeedA = 0;
    // }
    // if (motorSpeedB < 70) 
    // {
    // motorSpeedB = 0;
    // }

 
    analogWrite(enA, motorSpeedA); // Send PWM signal to motor A
   
    analogWrite(enB, motorSpeedB); // Send PWM signal to motor B
  
    analogWrite(dome, domeSpeed);  // Send PWM signal to dome motor

    if (PS3.PS3NavigationConnected) // will display when the PS3 Remote have been connected and only one time
{
  static bool justConnected = true;
  
  if ( justConnected == true )
{
    lcd.clear();
    lcd.print( "PS3 NAVIGATION" );
    lcd.setCursor(0, 1);
    lcd.print("REMOTE CONNECTED");
    pwm.write(File16,sizeof(File16)); // MP3 sound confirming that the PS3 Navigation remote have been connected
    delay(6000);
    Serial.println();
    Serial.println("Current Battery voltage");
    Serial.println(String("is at ") + V2 + " Volt");
    lcd.clear();
    lcd.print("Current Battery");
    lcd.setCursor(0, 1);
    lcd.print(String("is at ") + V2 + " Volt"); 
    delay(4000);
    Serial.print("Bat1 Temperature is "); 
    Serial.print(Tc1);
    Serial.print("C ");
    Serial.print(", Bat2 Temperature is "); 
    Serial.print(Tc2);
    Serial.println("C");
    lcd.clear();
    lcd.print(String("Batt1 @ ") + Tc1 + " C");
    lcd.setCursor(0, 1);
    lcd.print(String("Batt2 @ ") + Tc2 + " C");
    delay(4000);
    lcd.clear();
    lcd.print("I am ready to go");
    lcd.setCursor(0,1);
    lcd.print("Are you ready?");
    pwm.write(File21,sizeof(File21));
    delay(50);
    justConnected = false;
    digitalWrite(Capcharge, LOW); // that will turn that output low after the remote is connected so the battery voltage monitor become active
}
}

  if (V2<13.50) // This section will show up a low voltage warning only once when being triggered under a preset number
{
    static bool lowvoltage = true;
  
  if ( lowvoltage == true )
{
    Serial.println(String("CURRENT BATTERY IS RUNNING LOW, ") + V2 + " Volt");
    lcd.clear();
    lcd.print( "THIS BATTERY IS" );
    lcd.setCursor(0, 1);
    lcd.print(String("LOW, ") + V2 + " Volt");
    lowvoltage = false;
}
}

  if (V2<12.50) // Low voltage battery alert, reset the arduino board
{
    Serial.println(String("CURRENT BATTERY VERY LOW, ") + V2 + " Volt, SWITCH BATT");
    lcd.clear();
    lcd.print("THIS BATTERY IS");
    lcd.setCursor(0, 1);
    lcd.print(String("VERY LOW ") + V2 + " V");
    pwm.write(File17,sizeof(File17)); // MP3 sound of Droid shutting down
    delay(4000);
    lcd.clear();
    lcd.print("SWITCH BATT");
    lcd.setCursor(0, 1);
    lcd.print("AND RECHARGE");
    delay(4000); // to leave the display on long enough so we can see that it will reset
    resetFunc(); 
}

  if (PS3.getButtonPress(PS)) // Emergency stop option, turning off the entire system
{
    Serial.println("EMERGENCY STOP ACTIVATED, SHUTTING DOWN");
    analogWrite(enA, 0);
    analogWrite(enB, 0);
    lcd.clear();
    lcd.print("EMERGENCY STOP");
    lcd.setCursor(0, 1);
    lcd.print(" SHUTTING DOWN ");
    pwm.write(File17,sizeof(File17)); // MP3 sound of Droid shutting down
    delay(3000); // so we can see on the display that the droid will be shutting down
    digitalWrite(Relay, HIGH);
    // delay(1000);
    // resetFunc(); // not sure if I need this since the relay goes high and turn off the entire system 
}

  if (dAxis > 10)
{
    domeSpeed = map(dAxis, 0, 255, 0, 255);
}

  else 
{
    domeSpeed = 0;
}

  if (PS3.getButtonPress(L1) && PS3.getButtonClick(UP)) // Play file 1 of R2 STAR WAR OPENING MUSIC
{
    pwm.write(File1,sizeof(File1));
    delay(50);
    Serial.println("L1+UP = FILE 1");
    lcd.clear();
    lcd.print("L1+UP= FILE 1");
}   

  if (PS3.getButtonPress(L1) && PS3.getButtonClick(DOWN)) // Play file 2 of R2 THE SITH SOUNDTRACK
{
    pwm.write(File2,sizeof(File2));
    delay(50);
    Serial.println("L1+DOWN = FILE 2");
    lcd.clear();
    lcd.print("L1+DOWN= FILE 2");
}   

  if (PS3.getButtonPress(L1) && PS3.getButtonClick(LEFT)) // Play file 3 of R2 LEA MESSAGE
{
    pwm.write(File3,sizeof(File3));
    delay(50);
    Serial.println("L1+LEFT = FILE 3");
    lcd.clear();
    lcd.print("L1+LEFT= FILE 3");
}   

  if (PS3.getButtonPress(L1) && PS3.getButtonClick(RIGHT)) // Play file 4 of R2 THE EMPIRE MARCH
{
    pwm.write(File4,sizeof(File4));
    delay(50);
    Serial.println("L1+RIGHT = FILE 4");
    lcd.clear();
    lcd.print("L1+RIGHT= FILE 4");
}   

  if (PS3.getButtonPress(L1) && PS3.getButtonClick(CROSS)) // Play file 7 of R2 THE FORCE THEME
{
    pwm.write(File7,sizeof(File7));
    delay(50);
    Serial.println("L1+CROSS = FILE 7");
    lcd.clear();
    lcd.print("L1+CROSS= FILE 7");
} 

  if (PS3.getButtonPress(L1) && PS3.getButtonClick(CIRCLE)) // Play file 8 of R2 BAR MUSIC XAXOPHONE EPISODE 1
{
    pwm.write(File8,sizeof(File8));
    delay(50);
    Serial.println("L1+CIRCLE = FILE 8");
    lcd.clear();
    lcd.print("L1+CIRL= FILE 8");
}     

  if (PS3.getButtonPress(L2) && PS3.getButtonClick(UP)) // Play file 10 of R2
{
    pwm.write(File10,sizeof(File10));
    delay(50);
    Serial.println("L2+UP = FILE 10");
    lcd.clear();
    lcd.print("L2+UP= FILE 10");
} 

  if (PS3.getButtonPress(L2) && PS3.getButtonClick(DOWN)) // Play file 11 of R2
{
    pwm.write(File11,sizeof(File11));
    delay(50);
    Serial.println("L2+DOWN = FILE 11");
    lcd.clear();
    lcd.print("L2+DOWN= FILE 11");
}         

  if (PS3.getButtonPress(L2) && PS3.getButtonClick(LEFT)) // Play file 12 of R2
{
    pwm.write(File12,sizeof(File12));
    delay(50);
    Serial.println("L2+LEFT = FILE 12");
    lcd.clear();
    lcd.print("L2+LEFT= FILE 12");
} 

  if (PS3.getButtonPress(L2) && PS3.getButtonClick(RIGHT)) // Play file 13 of R2
{
    pwm.write(File13,sizeof(File13));
    delay(50);
    Serial.println("L2+RIGHT = FILE 13");
    lcd.clear();
    lcd.print("L2+RIGH= FILE 13");
} 

  if (PS3.getButtonPress(L2) && PS3.getButtonClick(CROSS)) // Play file 14 of R2 
{
    pwm.write(File14,sizeof(File14));
    delay(50);
    Serial.println("L2+CROSS = FILE 14");
    lcd.clear();
    lcd.print("L2+CROS= FILE 14");
} 

  if (PS3.getButtonPress(L2) && PS3.getButtonClick(CIRCLE)) // Play file 15 of R2 
{
    pwm.write(File15,sizeof(File15));
    delay(50);
    Serial.println("L2+CIRCLE = FILE 15");
    lcd.clear();
    lcd.print("L2+CIRL= FILE 15");
} 

  if (PS3.getButtonPress(L1) && PS3.getButtonClick(L3)) // Play file 9 of R2 pouatttttt fart
{
    pwm.write(File9,sizeof(File9));
    delay(50);
    Serial.println("L1+L3 = FILE 9");
    lcd.clear();
    lcd.print("L1+L3= FILE 9");
}

  if (PS3.getButtonPress(L2) && PS3.getButtonClick(L3)) // Play file 20 of R2 intermittent noise for 90 seconds
{
    pwm.write(File20,sizeof(File20));
    delay(50);
    Serial.println("L2+L3 = FILE 20");
    lcd.clear();
    lcd.print("L2+L3= FILE 20");
    
}

  if (PS3.getButtonClick(L3)) // Push L3 to play file 5 of R2 screaming while running wild
{
    pwm.write(File5,sizeof(File5));
    delay(50);
    Serial.println("L3 = FILE 5");
    lcd.clear();
    lcd.print("L3= FILE 5");
}  

  if (PS3.getButtonClick(UP)) // Control function to display the battery voltage in real time
{
     
    Serial.println();
    Serial.println("Current Battery voltage");
    Serial.println(String("is at ") + V2 + " Volt");
    lcd.clear();
    lcd.print("Current Battery");
    lcd.setCursor(0, 1);
    lcd.print(String("is at ") + V2 + " Volt"); 
    delay(3000);
    Serial.print("Bat1 Temperature is "); 
    Serial.print(Tc1);
    Serial.print("C ");
    Serial.print(", Bat2 Temperature is "); 
    Serial.print(Tc2);
    Serial.println("C");
    lcd.clear();
    lcd.print(String("Batt1 @ ") + Tc1 + " C");
    lcd.setCursor(0, 1);
    lcd.print(String("Batt2 @ ") + Tc2 + " C");
}
  
  if (PS3.getButtonClick(DOWN)) // Control function to be added later for any servo action
{
    Serial.println("DOWN");
    lcd.clear();
    lcd.print("DOWN");
}
  
  if (PS3.getButtonClick(LEFT)) // assigned for volume down function
{
    Serial.println("LEFT= Volume - ");
    lcd.clear();
    lcd.print("LEFT = ");
    lcd.setCursor(0, 1);
    lcd.print("Volume - ");
    pwm.write(VolDN,sizeof(VolDN));
}
  
  if (PS3.getButtonClick(RIGHT)) // assigned for volume up function
{
    Serial.println("RIGHT= Volume + ");
    lcd.clear();
    lcd.print("RIGHT = ");
    lcd.setCursor(0, 1);
    lcd.print("Volume + ");
    pwm.write(VolUP,sizeof(VolUP));    
}

 if (PS3.getButtonClick(CROSS)) // assigned for MP3 music pause
{
    Serial.println("CROSS = Music Stop ");
    lcd.clear();
    lcd.print("CROSS = ");
    lcd.setCursor(0, 1);
    lcd.print("Stop Music ");
    pwm.write(MusPd,sizeof(MusPd));    
}

    bool currentCircleButtonState = PS3.getButtonPress(CIRCLE); // short/long press of Circle button for the dome control
     
  if (currentCircleButtonState != lastCircleButtonState) 
{
    // Circle Button state has changed
    lastCircleButtonState = currentCircleButtonState;
      
  if (currentCircleButtonState == true)
{
    // Cross button has been pressed
    CircleButtonPressedTime = millis();
        
}
  else
{
     // Cross button has been released
        
  if (millis() - CircleButtonPressedTime >= 1000L) // this will make R2 spin on himself for 5 seconds
{
 pwm.write(File18,sizeof(File18)); // spinning around MP3 file 
    Serial.println("SPIN AROUND TIME");
    lcd.clear();
    lcd.print("SPIN AROUND TIME");
    // Set Motor A forward
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
    // Set Motor B backward
    digitalWrite(in3, HIGH);
    digitalWrite(in4, LOW);
    analogWrite(enA, 120);
    analogWrite(enB, 100);
    digitalWrite(in5, LOW);  //set the dome direction on the opposite of the spin direction for Dome static look
    digitalWrite(in6, HIGH);
    analogWrite(dome, 255);  // Send PWM signal to spin the dome as well, to be adjusted so the Dome look it is static
    delay(5000);
    analogWrite(enA, 0);    // stop the spinning of both the Foot Drive and the Dome after the 5 seconds 
    analogWrite(enB, 0);
    analogWrite(dome, 0);
    lcd.clear();
    lcd.print("FEELING DIZZY");
    lcd.setCursor(0, 1);
    lcd.print("@ * % # * ? ~ ^");
}

  if (millis() - CircleButtonPressedTime < 999L) // this will change the direction of the dome
{
    Serial.println("CIRCLE = CHANGE DIRECTION OF DOME");
    lcd.clear();
    lcd.print("CIRCLE= CHANGE");
    lcd.setCursor(0, 1);
    lcd.print("DOME DIRECTION");
    digitalWrite(in5, HIGH);
    digitalWrite(in6, LOW);
    
  if (DomeState==0)
{
    digitalWrite(in5, HIGH);
    digitalWrite(in6, LOW);
    DomeState=1;
}
  else 
{
    digitalWrite(in5, LOW);
    digitalWrite(in6, HIGH);
    DomeState=0;
}
}
}
}
}
}
